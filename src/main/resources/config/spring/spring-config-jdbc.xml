<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
	                      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd         
	                      http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd         
	                      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<!-- 配置数据源dpcp的数据库连接池 -->
	<!-- <bean id="dbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${db.driverClass}"/>
		<property name="url" value="${db.jdbcUrl}"/>
		<property name="username" value="${db.username}"/>
		<property name="password" value="${db.password}"/>
		
		<property name="validationQuery" value="${dbcp.validationQuery}"/>
	</bean> -->
 	
	<!-- 配置数据源c3p0的数据库连接池 -->
	<!-- <bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db.driverClass}"></property>
		<property name="jdbcUrl" value="${db.jdbcUrl}"></property>
		<property name="user" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
		连接池中保留的最大连接数。Default: 15
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		两次连接中间隔时间，单位毫秒。Default: 1000
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}"></property>
		定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"></property>
		获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"></property>
	</bean> -->
	
	<!-- bonecp数据库连接池管理 -->
	<!-- <bean id="bonecpDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<property name="driverClass" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.jdbcUrl}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="idleConnectionTestPeriodInMinutes" value="${idleConnectionTestPeriod}"></property>
		<property name="idleMaxAgeInMinutes" value="${idleMaxAge}"></property>
		<property name="maxConnectionsPerPartition" value="${maxConnectionsPerPartition}"></property>
		<property name="minConnectionsPerPartition" value="${minConnectionsPerPartition}"></property>
		<property name="partitionCount" value="${partitionCount}"></property>
		<property name="acquireIncrement" value="${acquireIncrement}"></property>
		<property name="releaseHelperThreads" value="${releaseHelperThreads}"></property>
		<property name="statementsCachedPerConnection" value="${statementsCachedPerConnection}"></property>
		<property name="connectionTimeoutInMs" value="${connectionTimeoutInMs}"></property>
		<property name="defaultAutoCommit" value="${defaultAutoCommit}"></property>
	</bean> -->
	
	<!-- druid数据库连接池管理 -->
	<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driverClass}"/>

        <property name="url" value="${db.jdbcUrl}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />

        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="filters" value="stat" />
	</bean>
	
	<bean id="druidDataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db2.driverClass}"/>

        <property name="url" value="${db2.jdbcUrl}" />
        <property name="username" value="${db2.username}" />
        <property name="password" value="${db2.password}" />

        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="${druid2.validationQuery}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="filters" value="stat" />
	</bean>

	<!-- ================================事务相关控制开始================================================= -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="druidDataSource"></property>
	</bean>
	
	<!-- 基于注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
		
	<bean name="transactionManager2"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="druidDataSource2"></property>
	</bean>
	
	<!-- 基于注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager2" />
	<!-- ================================事务相关控制结束================================================= -->
	
	
	<!-- mybatis会话工厂产生session -->
	<bean id="mybatisSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="druidDataSource" />
		
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml" />
		   
		<!-- 自动扫描model目录, 省掉Configuration.xml里的手工配置 -->
        <!-- <property name="typeAliasesPackage" value="com.teshehui.demo.model,com.teshehui.demo.dao.po" /> -->
        
		 <!-- 显式指定Mapper文件位置 -->
        <!-- <property name="mapperLocations" value="classpath:config/mybatis/mapper/*/*.xml"></property> -->
	</bean>
	<bean id="mybatisSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg index="0" ref="mybatisSessionFactory" />
	</bean>
	
	<!-- 通用的mybatisDao -->
	<bean id="mybatisDao" class="net.wwwfred.framework.core.dao.mybatis.impl.MybatisDaoImpl">
		<property name="sqlSessionTemplate"><ref bean="mybatisSessionTemplate"/></property>
	</bean>
	
	
	<!-- mybatis会话工厂产生session -->
	<bean id="mybatisSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="druidDataSource2" />
		
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml" />
		   
		<!-- 自动扫描model目录, 省掉Configuration.xml里的手工配置 -->
        <!-- <property name="typeAliasesPackage" value="com.teshehui.demo.model,com.teshehui.demo.dao.po" /> -->
        
		 <!-- 显式指定Mapper文件位置 -->
        <!-- <property name="mapperLocations" value="classpath:config/mybatis/mapper/*/*.xml"></property> -->
	</bean>
	<bean id="mybatisSessionTemplate2" class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg index="0" ref="mybatisSessionFactory2" />
	</bean>
	
	<!-- 通用的mybatisDao -->
	<bean id="mybatisDao2" class="net.wwwfred.framework.core.dao.mybatis.impl.MybatisDaoImpl">
		<property name="sqlSessionTemplate"><ref bean="mybatisSessionTemplate2"/></property>
	</bean>
	
</beans>
